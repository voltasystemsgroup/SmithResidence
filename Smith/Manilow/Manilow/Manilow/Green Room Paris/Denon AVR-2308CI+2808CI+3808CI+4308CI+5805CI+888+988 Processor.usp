/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Electronics
System Name:
System Number:
Programmer: GM 
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directi	ves as needed)
*******************************************************************************************/
#SYMBOL_NAME "Denon AVR-2308CI+2808CI+3808CI+4308CI+5805CI+888+988 Processor"
#HINT "Denon AVR-2308CI+2808CI+3808CI+4308CI+5805CI+888+988 Processor"
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
#HELP_BEGIN
   This module is not standalone, and as such only works with the Denon AVR-2308CI+2808CI+3808CI+4308CI+5805CI+888+988 module.
   Parses return function data from Denon AVR-2308CI+2808CI+3808CI+4308CI+5805CI+888+988. 
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT AM_Enabled, FM_Enabled, 
							AM_HD_Enabled, FM_HD_Enabled, 
							SendMain, SendZone2, SendZone3, iPod, USB,
							Enter_AM_FM, Enter_HD, Enter_XM,Enter_DAB; 
BUFFER_INPUT 	Direct_Key_AM_FM$[12],	Direct_Key_HD$[12] ,Direct_Key_XM$[12],Direct_Key_DAB$[12],FromDevice$[255];

ANALOG_OUTPUT MainLevel, Zone2Level, Zone3Level; 
STRING_OUTPUT MainLevel$, Zone2Level$, Zone3Level$, FLLevel$, FRLevel$, CLevel$, SWLevel$,
							SLLevel$, SRLevel$, SBLLevel$, SBRLevel$, SBLevel$, Analog_Tuner_Frequency$, HD_Tuner_Frequency$,
							XM_Tuner_Frequency$, DAB_Tuner_Frequency$, 
							
							HD_Station_Name$, HD_Station_Name_Long$,HD_Signal$, HD_Multicast_Current_CH$,
							HD_Multicast_CH$, HD_Program_Type$, HD_Artist$, HD_Title$, HD_Album$, HD_Genre$,

							XM_Preset$, XM_Channel_Name$,XM_Artist$, XM_Title$,
							XM_Radio_ID$, XM_Signal$,

							DAB_Station_Name$, DAB_Station_Name_Long$, DAB_Ensemble$,
							DAB_Program_Type$, DAB_Channel_CH$, DAB_Frequency$, 
							DAB_Mode$, DAB_Signal$, DAB_Time$, DAB_Date$,

							iPod_Line_0$,iPod_Line_1$,iPod_Line_2$,iPod_Line_3$,iPod_Line_4$,
							iPod_Line_5$,iPod_Line_6$,iPod_Line_7$,iPod_Line_8$,
							
							USB_NSA_Line_0$,USB_NSA_Line_1$,USB_NSA_Line_2$,USB_NSA_Line_3$,USB_NSA_Line_4$,
							USB_NSA_Line_5$,USB_NSA_Line_6$,USB_NSA_Line_7$,USB_NSA_Line_8$
														
							;
STRING_OUTPUT Direct_Command_Value_Displayed_AM_FM$,
							Direct_Command_Value_Displayed_XM$, 
							Direct_Command_Value_Displayed_DAB$,
							Direct_Command$, // need 6 digit direct tuning commands, SIMPL numeric keypad limited to 5, so we do some string tricks
							Mute_Main$; 

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
*******************************************************************************************/
INTEGER Level, Semaphore, FL, FR, SL, SR, SBL, SBR, C, SW, SB, FreqHi, FreqLo;
STRING	Tempstring$[255], Command$[2], Sub$[3], Sub3$[1], MainLevelInt$[10],
				Zone2LevelInt$[10], MainLevelSent$[10], Zone2LevelSent$[10],
				Zone3LevelInt$[10], Zone3LevelSent$[10],
				Zone4LevelInt$[10];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

String_Function CalculateVolumeText(Integer Value)
	{	
	String Text$[10];
	String Value$[3];
	Integer Remainder;
	
	if(Value >= 800)
		Makestring(Text$, "%u.%u dB", (Value - 800) / 10, (Value - 800) mod 10);
	else
		{
		Value = -(Value - 800);
		Makestring(Value$, "%03u\n", Value);
		if((Value mod 10) > 0)
			Makestring(Text$, "- %u.5 dB", Value / 10);
		else
			Makestring(Text$, "- %u.0 dB", Value / 10);
		}
    Return (Text$);
	}
 
String_Function CalculateChannelText(Integer Value)
	{	
	String Text$[10];
	String Value$[3];
	Integer Remainder;
	
	if(Value >= 500)
		Makestring(Text$, "%u.%u dB", (Value - 500) / 10, (Value - 500) mod 10);
	else
		{
		Value = -(Value - 500);
		Makestring(Value$, "%03u\n", Value);
		if((Value mod 10) > 0)
			Makestring(Text$, "- %u.5 dB", Value / 10);
		else
			Makestring(Text$, "- %u.0 dB", Value / 10);
		}
    Return (Text$);
	}
        
        
String_Function RemoveNulls()
{
	  String sTemp$[255];
    Integer iNullLocation, iLength;
    sTemp$=Tempstring$; // initialize
    iNullLocation=0; 		// initialize
    while(find("\x00",sTemp$))
  	{
  		// sTemp$=Remove("\x00",sTemp$); // Remove everything up to and including the null
  		sTemp$=Remove("\x00", TempString$);
  		iNullLocation = find("\x00",sTemp$); // find nulls
  		if (iNullLocation > 0) iLength = SetString("\x20",iNullLocation,sTemp$); // replace them with string
		}
  	Return(sTemp$);

}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE  Direct_Key_AM_FM$
{
/*
Range	AM	520	1700	
	User Types without leading zeroes		520	1700	followed by Enter
	Denon needs	AM > 050000	052000	170000	
	After Enter		if 3 pad left 1 0, pad right 2 0's		
	After Enter		if 4 and last digit 0, pad left 1 0, pad right 1 0	if 4 pad right 2 0's	
	After Enter		if 5 pad right 1 0	
	After Enter		if 6 pass whole string	if 6 pass whole string	

Range	FM	87.9	107.9	
	User Types without leading zeroes		879	1079	followed by Enter
	Denon needs	FM < 05000	008970	010790	
	After Enter		If 3 pad left 2 0's, pad right 1 0		
	After Enter		if 4 only pad left 2 0's	If 4 pad left 1 0, pad right 1 0	
	After Enter		if 5 only pad left 1 0	
	After Enter		if 6 pass whole string	if 6 pass whole string	
 */
  
  
  // build 6 digit direct key strings
  integer iLength;
  string sTemp$[1];
  iLength = len(Direct_Key_AM_FM$);
  if (iLength > 0) sTemp$=right(Direct_Key_AM_FM$,1);
  if(find("\x00",Direct_Key_AM_FM$) > 0) 
  	{
  		ClearBuffer (Direct_Key_AM_FM$);
  	}

// Pass normal Denon strings unpadded

  if(iLength = 7) // Tuner freq. direct commands are 6 digits long
  	{
  		Direct_Key_AM_FM$ = sTemp$;
  	} 	
 
  Direct_Command_Value_Displayed_AM_FM$ = Direct_Key_AM_FM$;

}

CHANGE  Direct_Key_HD$
{
/*
Range	AM	520	1700	
	User Types without leading zeroes		520	1700	followed by Enter
	Denon needs	AM > 050000	052000	170000	
	After Enter		if 3 pad left 1 0, pad right 2 0's		
	After Enter		if 4 and last digit 0, pad left 1 0, pad right 1 0	if 4 pad right 2 0's	
	After Enter		if 5 pad right 1 0	
	After Enter		if 6 pass whole string	if 6 pass whole string	

Range	FM	87.9	107.9	
	User Types without leading zeroes		879	1079	followed by Enter
	Denon needs	FM < 05000	008970	010790	
	After Enter		If 3 pad left 2 0's, pad right 1 0		
	After Enter		if 4 only pad left 2 0's	If 4 pad left 1 0, pad right 1 0	
	After Enter		if 5 only pad left 1 0	
	After Enter		if 6 pass whole string	if 6 pass whole string	
 */
  
  
  // build 6 digit direct key strings
  integer iLength;
  string sTemp$[1];
  iLength = len(Direct_Key_HD$);
  if (iLength > 0) sTemp$=right(Direct_Key_HD$,1);
  if(find("\x00",Direct_Key_HD$) > 0) 
  	{
  		ClearBuffer (Direct_Key_HD$);
  	}

// Pass normal Denon strings unpadded

  if(iLength = 7) // Tuner freq. direct commands are 6 digits long
  	{
  		Direct_Key_HD$ = sTemp$;
  	} 	
 
  Direct_Command_Value_Displayed_AM_FM$ = Direct_Key_HD$;

}

CHANGE  Direct_Key_XM$
{
  
  
  // build 3 digit direct key strings
  integer iLength;
  string sTemp$[1];
  iLength = len(Direct_Key_XM$);
  if (iLength > 0) sTemp$=right(Direct_Key_XM$,1);
  if(find("\x00",Direct_Key_XM$) > 0) 
  	{
  		ClearBuffer (Direct_Key_XM$);
  	}
 
  if(iLength = 4 )  // XM Tuner freq. direct commands are 3 digits long
  	{
  		Direct_Key_XM$ = sTemp$;
		}
  Direct_Command_Value_Displayed_XM$ = Direct_Key_XM$;

}
CHANGE  Direct_Key_DAB$
{
  
  
  // build 6 digit direct key strings
  integer iLength;
  string sTemp$[1];
  iLength = len(Direct_Key_DAB$);
  if (iLength > 0) sTemp$=right(Direct_Key_DAB$,1);
  if(find("\x00",Direct_Key_DAB$) > 0) 
  	{
  		ClearBuffer (Direct_Key_DAB$);
  	}
  if(iLength = 7 )  // DAB Tuner freq. direct commands are 6 digits long
  	{
  		Direct_Key_DAB$ = sTemp$;
		}
  Direct_Command_Value_Displayed_DAB$ = Direct_Key_DAB$;

}





CHANGE FromDevice$
	{
    integer iStringLength;
    if(Semaphore = 0)
    	{
    	Semaphore = 1;
    	While(find("\x0D", FromDevice$) > 0)
    		{
    		TempString$ = "";
    		if(find("MUON", FromDevice$) > 0 && find("Z2MUON", FromDevice$) = 0 && find("Z3MUON", FromDevice$) = 0) 
    		{
    		  Mute_Main$ = "Z1MUON";
    		}
    		if(find("MUOFF", FromDevice$) > 0 && find("Z2MUOFF", FromDevice$) = 0 && find("Z3MUOFF", FromDevice$) = 0) 
    		{
    		  Mute_Main$ = "Z1MUOFF";
    		}
    		if(find("MVMAX", FromDevice$) > 0)
    		{
    			TempString$ = remove("MVMAX", FromDevice$); // added at 1/12/07 because the protocol added a max string with it's own \x0D
    			TempString$ = remove("\x0D", TempString$);
    		}
    		else 
    			TempString$ = remove("\x0D", FromDevice$);
    		
     		Command$ = left(Tempstring$, 2);
      	iStringLength=Find("\x0D",Tempstring$);
    			
    			    IF (find ("HDST NAME",Tempstring$) > 0 ) HD_Station_Name$ = Mid(Tempstring$,10, iStringLength-10); 
    			   	IF (find ("HDSTL NAME",Tempstring$) > 0 ) HD_Station_Name_Long$=Mid(Tempstring$,11, iStringLength-11);
    			   	IF (find ("HDSIG",Tempstring$) > 0 ) HD_Signal$=Mid(Tempstring$,6, iStringLength-6); 
    			    IF (find ("HDMLT CURRENT",Tempstring$) > 0 )HD_Multicast_Current_CH$=Mid(Tempstring$,14, iStringLength-14);
							IF (find ("HDMLT CAST CH",Tempstring$) > 0 )HD_Multicast_CH$=Mid(Tempstring$,14, iStringLength-14);
							IF (find ("HDPTY",Tempstring$) > 0 )HD_Program_Type$=Mid(Tempstring$,6, iStringLength-6); 
						  IF (find ("HD ARTIST",Tempstring$) > 0 )	HD_Artist$=Mid(Tempstring$,10, iStringLength-10); 
							IF (find ("HD TITLE",Tempstring$) > 0 )HD_Title$=Mid(Tempstring$,9, iStringLength-9); 
							IF (find ("HD ALBUM",Tempstring$) > 0 )HD_Album$=Mid(Tempstring$,9, iStringLength-9); 
							IF (find ("HD GENRE",Tempstring$) > 0 )HD_Genre$=Mid(Tempstring$,9, iStringLength-9);
							
    			
    			    IF (find ("TPXMA",Tempstring$) > 0 ) XM_Preset$ = Mid(Tempstring$,6, iStringLength-6); 
    			   	IF (find ("XMCH NAME ",Tempstring$) > 0 ) XM_Channel_Name$=Mid(Tempstring$,11, iStringLength-11);
    			   	IF (find ("XMARTIST ",Tempstring$) > 0 ) XM_Artist$=Mid(Tempstring$,10, iStringLength-10); 
    			    IF (find ("XMTITLE ",Tempstring$) > 0 ) XM_Title$=Mid(Tempstring$,8, iStringLength-8);
							IF (find ("XMXMID ",Tempstring$) > 0 ) XM_Radio_ID$=Mid(Tempstring$,6, iStringLength-6);
							IF (find ("XMSIGNAL ",Tempstring$) > 0 ) XM_Signal$=Mid(Tempstring$,9, iStringLength-9); 
							
    			
    			    IF (find ("DABST NAME",Tempstring$) > 0 ) DAB_Station_Name$ = Mid(Tempstring$,10, iStringLength-10); 
    			   	IF (find ("DABSTL NAME",Tempstring$) > 0 ) DAB_Station_Name_Long$=Mid(Tempstring$,11, iStringLength-11);
    			    IF (find ("DABEN NAME",Tempstring$) > 0 )  DAB_Ensemble$ = Mid(Tempstring$,10, iStringLength-10); 
    			   	IF (find ("DABPTY",Tempstring$) > 0 ) DAB_Program_Type$=Mid(Tempstring$,7, iStringLength-7);
              IF (find ("DAB",Tempstring$) > 0  && len(Tempstring$) = 7) DAB_Channel_CH$=Mid(Tempstring$,4, iStringLength-4);
              IF (find ("DAB",Tempstring$) > 0  && len(Tempstring$) = 10) DAB_Frequency$=Mid(Tempstring$,4, iStringLength-4);
              IF (find ("DABMODE",Tempstring$) > 0) DAB_Mode$=Mid(Tempstring$,8, iStringLength-8);
    			   	IF (find ("DABSIG",Tempstring$) > 0 ) DAB_Signal$=Mid(Tempstring$,7, iStringLength-7); 

   			   		IF (find ("DABTIME",Tempstring$) > 0 ) DAB_Time$=Mid(Tempstring$,8, iStringLength-8); 
  			   		IF (find ("DABDATE",Tempstring$) > 0 ) DAB_Date$=Mid(Tempstring$,8, iStringLength-8); 

 							


    			
 
    			    IF (find ("IPA0",Tempstring$) > 0 ) 
    			    {	    			    	    	
     			    	iPod_Line_0$=Mid(RemoveNulls(),5, iStringLength-5); 
    			    }
    			    IF (find ("IPA1",Tempstring$) > 0 ) 
    			    {	
     			    	iPod_Line_1$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("IPA2",Tempstring$) > 0 ) 
    			    {	
     			    	iPod_Line_2$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("IPA3",Tempstring$) > 0 ) 
    			    {	
     			    	iPod_Line_3$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("IPA4",Tempstring$) > 0 ) 
    			    {	
     			    	iPod_Line_4$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("IPA5",Tempstring$) > 0 ) 
    			    {	
    			    	iPod_Line_5$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("IPA6",Tempstring$) > 0 ) 
    			    {	
     			    	iPod_Line_6$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("IPA7",Tempstring$) > 0 ) 
    			    {	
     			    	iPod_Line_7$=Mid(RemoveNulls(),5, iStringLength-5); 
    			    }
    			    IF (find ("IPA8",Tempstring$) > 0 ) 
    			    {	
    			    	iPod_Line_8$=Mid(RemoveNulls(),5, iStringLength-5); 
    			    }
    			    

     			
     			    IF (find ("NSA0",Tempstring$) > 0 ) 
    			    {	
      			    //Remove Nulls from Tempstring$
      			    USB_NSA_Line_0$=Mid(RemoveNulls(),5, iStringLength-5); 
    			    }
    			    IF (find ("NSA1",Tempstring$) > 0 ) 
    			    {	
      			    USB_NSA_Line_1$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("NSA2",Tempstring$) > 0 ) 
    			    {	
      		    	USB_NSA_Line_2$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("NSA3",Tempstring$) > 0 ) 
    			    {	
    			    	USB_NSA_Line_3$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("NSA4",Tempstring$) > 0 ) 
    			    {	
    			    	USB_NSA_Line_4$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("NSA5",Tempstring$) > 0 ) 
    			    {	
     			    	USB_NSA_Line_5$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("NSA6",Tempstring$) > 0 ) 
    			    {	
     			    	USB_NSA_Line_6$=Mid(RemoveNulls(),6, iStringLength-6); 
    			    }
    			    IF (find ("NSA7",Tempstring$) > 0 ) 
    			    {	
    			    	USB_NSA_Line_7$=Mid(RemoveNulls(),5, iStringLength-5); 
    			    }
    			    IF (find ("NSA8",Tempstring$) > 0 ) 
    			    {	
    			    	USB_NSA_Line_8$=Mid(RemoveNulls(),5, iStringLength-5); 
    			    }
    			    

     		
    		if(Command$ = "MV")
    			{
    			Level = atoi(mid(Tempstring$, 3, 2)) * 2; // two digit string
    				if(Level = 198)
     				{
    				MainLevel = 0;
    				MainLevelInt$ = "---";
    				}
    			else
    				{
    				if(byte(Tempstring$, 5) = 53) // byte = 53 means an ASCII "5", accounts for .5 increments between steps
    					Level = Level + 1;
    				MainLevel = Level;
    				Level = Level * 5;
    				MainLevelInt$ = CalculateVolumeText(Level);
    				}
    			}
    		else if(Command$ = "Z2" && byte(Tempstring$,3) >= 0x30 && byte(Tempstring$,3) <= 0x39) 
    			{
    			Level = atoi(mid(Tempstring$, 3, 2)) * 2;
    			if(Level = 198)
    				{
    				Zone2Level = 0;
    				Zone2LevelInt$ = "---";
    				}
    			else
    				{
    				if(byte(Tempstring$, 5) = 53)
    					Level = Level + 1;
    				Zone2Level = Level;
    				Level = Level * 5;
    				Zone2LevelInt$ = CalculateVolumeText(Level);
    				}
    			}
    		else if(Command$ = "Z3" && byte(Tempstring$,3) >= 0x30 && byte(Tempstring$,3) <= 0x39)
    			{
    			Level = atoi(mid(Tempstring$, 3, 2)) * 2;
    			if(Level = 198)
    				{
    				Zone3Level = 0;
    				Zone3LevelInt$ = "---";
    				}
    			else
    				{
    				if(byte(Tempstring$, 5) = 53)
    					Level = Level + 1;
    				Zone3Level = Level;
    				Level = Level * 5;
    				Zone3LevelInt$ = CalculateVolumeText(Level);
    				}
    			}
    		else if(Left(Tempstring$,4) = "TFAN" && Find("CMP", Tempstring$) = 0 ) // Analog Tuner frequency
    			{
    			FreqHi = atoi(mid(Tempstring$, 5, 4));
    			FreqLo = atoi(mid(Tempstring$, 9, 2));
    			if(ATOI (Tempstring$) > 50000) // special case for analog AM vs analog FM
     				{
    				makestring(Analog_Tuner_Frequency$, "%u kHz", FreqHi);
    				}
    			else
    				{
    				makestring(Analog_Tuner_Frequency$, "%u.%u MHz", FreqHi, FreqLo);
    				}
    		  
    			}
    		else if(Left(Tempstring$,4) = "TFXM" && Find("CMP", Tempstring$) = 0 ) // XM Tuner frequency
    			{
    				makestring(XM_Tuner_Frequency$, "XM-%u", atoi(Tempstring$));
      		  
    			}
    		else if(Left(Tempstring$,4) = "TFDA" && Find("CMP", Tempstring$) = 0 ) // XM Tuner frequency
    			{
    				makestring(DAB_Tuner_Frequency$, "XM-%u", atoi(Tempstring$));
      		  
    			}
    		else if(Left(Tempstring$,4) = "TFHD" && Len(Tempstring$) = 11 ) // HD Tuner frequency
    			{
    			FreqHi = atoi(mid(Tempstring$, 5, 4));
    			FreqLo = atoi(mid(Tempstring$, 9, 2));
    			if(ATOI (Tempstring$) > 50000) // special case for HD AM vs HD FM
     				{
    				makestring(HD_Tuner_Frequency$, "%u kHz", FreqHi);
    				}
    			else
    				{
    				makestring(HD_Tuner_Frequency$, "%u.%u MHz", FreqHi, FreqLo);
    				}
    		  
    			}
      	else if(Command$ = "CV")
    			{
    			Sub$ = mid(Tempstring$, 3, 3);
    			Sub3$ = mid(Tempstring$, 3, 1);
    			if((Sub$ = "SBL") || (Sub$ = "SBR"))
    				{
    				Level = atoi(mid(Tempstring$, 7, 2)) * 2;
    				if(byte(Tempstring$, 9) = 53)
    					Level = Level + 1;
    				Level = Level * 5;
    				if((Sub$ = "SBL") && (Level <> SBL))
    					{
    					SBLLevel$ = CalculateChannelText(Level);
    					SBL = Level;
    					}
    				else if((Sub$ = "SBR") && (Level <> SBR))
    					{
    					SBRLevel$ = CalculateChannelText(Level);
    					SBR = Level;
    					}
    				}
    			else if((Sub$ = "SB ") || (Sub$ = "SR ") || (Sub$ = "SL ") || (Sub$ = "SW ") || (Sub$ = "FL ") || (Sub$ = "FR "))
    				{
    				Level = atoi(mid(Tempstring$, 6, 2)) * 2;
    				if(byte(Tempstring$, 8) = 53)
    					Level = Level + 1;
    				Level = Level * 5;
    				if((Sub$ = "SB ") && (Level <> SB))
    					{ 
    					SBLevel$ = CalculateChannelText(Level);
    					SB = Level;
    					}
    				else if((Sub$ = "SR ") && (Level <> SR))
    					{
    					SRLevel$ = CalculateChannelText(Level);
    					SR = Level;
    					}
    				else if((Sub$ = "SL ") && (Level <> SL))
    					{
    					SLLevel$ = CalculateChannelText(Level);
    					SL = Level;
    					}
    				else if((Sub$ = "SW ") && (Level <> SW))
    					{
    					SWLevel$ = CalculateChannelText(Level);
    					SW = Level;
    					}
    				else if((Sub$ = "FR ") && (Level <> FR))
    					{
    					FRLevel$ = CalculateChannelText(Level);
    					FR = Level;
    					}
    				else if((Sub$ = "FL ") && (Level <> FL))
    					{
    					FLLevel$ = CalculateChannelText(Level);
    					FL = Level;
    					}
    				}
    			else if(Sub3$ = "C")
    				{
    				Level = atoi(mid(Tempstring$, 5, 2)) * 2;
    				if(byte(Tempstring$, 7) = 53)
    					Level = Level + 1;
    				Level = Level * 5;
    				if(C <> Level)
    					{
   						CLevel$ = CalculateChannelText(Level);
   						C = Level;
   						}
   					}
   				}
   			}
    	Semaphore = 0;
    	}
	}

PUSH SendMain
	{
	if(MainLevelSent$ <> MainLevelInt$)
		{
		MainLevel$ = MainLevelInt$;
		MainLevelSent$ = MainLevelInt$;
		}
	}

PUSH SendZone2
	{
	if(Zone2LevelSent$ <> Zone2LevelInt$)
		{
		Zone2Level$ = Zone2LevelInt$;
		Zone2LevelSent$ = Zone2LevelInt$;
		}
	}		

PUSH SendZone3
	{
	if(Zone3LevelSent$ <> Zone3LevelInt$)
		{
		Zone3Level$ = Zone3LevelInt$;
		Zone3LevelSent$ = Zone3LevelInt$;
		}
	}
	

/****
Range	AM	520	1700	
	User Types without leading zeroes		520	1700	followed by Enter
	Denon needs	AM > 050000	052000	170000	
	After Enter		if 3 pad left 1 0, pad right 2 0's		
	After Enter		if 4 and last digit 0, pad left 1 0, pad right 1 0	if 4 pad right 2 0's	
	After Enter		if 5 pad right 1 0	
	After Enter		if 6 pass whole string	if 6 pass whole string	

Range	FM	87.9	107.9	
	User Types without leading zeroes		879	1079	followed by Enter
	Denon needs	FM < 05000	008970	010790	
	After Enter		If 3 pad left 2 0's, pad right 1 0		
	After Enter		if 4 only pad left 2 0's	If 4 pad left 1 0, pad right 1 0	
	After Enter		if 5 only pad left 1 0	
	After Enter		if 6 pass whole string	if 6 pass whole string	
****/
  // Check for AM vs FM to invoke easy direct tuning without forcing user to pad with zeroes (see rules above)

Push Enter_AM_FM

{
	  if (AM_Enabled && len(Direct_Key_AM_FM$) = 3) MAKESTRING (Direct_Command$,"TFAN0%s00\r",Direct_Key_AM_FM$);
	  if (AM_Enabled && len(Direct_Key_AM_FM$) = 4) MAKESTRING (Direct_Command$,"TFAN%s00\r",Direct_Key_AM_FM$);
	  if (AM_Enabled && len(Direct_Key_AM_FM$) = 5) MAKESTRING (Direct_Command$,"TFAN%s0\r",Direct_Key_AM_FM$);
	  if (AM_Enabled && len(Direct_Key_AM_FM$) = 6) MAKESTRING (Direct_Command$,"TFAN%s\r",Direct_Key_AM_FM$);
	  
	  if (FM_Enabled && len(Direct_Key_AM_FM$) = 3) MAKESTRING (Direct_Command$,"TFAN00%s0\r",Direct_Key_AM_FM$);
	  if (FM_Enabled && len(Direct_Key_AM_FM$) = 4) MAKESTRING (Direct_Command$,"TFAN00%s\r",Direct_Key_AM_FM$);
	  if (FM_Enabled && len(Direct_Key_AM_FM$) = 5) MAKESTRING (Direct_Command$,"TFAN0%s\r",Direct_Key_AM_FM$);
	  if (FM_Enabled &&len(Direct_Key_AM_FM$) = 6) MAKESTRING (Direct_Command$,"TFAN%s\r",Direct_Key_AM_FM$);
		ClearBuffer(Direct_Key_AM_FM$);
}
Push Enter_HD

{
	  if (AM_HD_Enabled && len(Direct_Key_HD$) = 3) MAKESTRING (Direct_Command$,"TFHD0%s00\r",Direct_Key_HD$);
	  if (AM_HD_Enabled && len(Direct_Key_HD$) = 4) MAKESTRING (Direct_Command$,"TFHD%s00\r",Direct_Key_HD$);
	  if (AM_HD_Enabled && len(Direct_Key_HD$) = 5) MAKESTRING (Direct_Command$,"TFHD%s0\r",Direct_Key_HD$);
	  if (AM_HD_Enabled && len(Direct_Key_HD$) = 6) MAKESTRING (Direct_Command$,"TFHD%s\r",Direct_Key_HD$);
	  
	  if (FM_HD_Enabled && len(Direct_Key_HD$) = 3) MAKESTRING (Direct_Command$,"TFHD00%s0\r",Direct_Key_HD$);
	  if (FM_HD_Enabled && len(Direct_Key_HD$) = 4) MAKESTRING (Direct_Command$,"TFHD00%s\r",Direct_Key_HD$);
	  if (FM_HD_Enabled && len(Direct_Key_HD$) = 5) MAKESTRING (Direct_Command$,"TFHD0%s\r",Direct_Key_HD$);
	  if (FM_HD_Enabled && len(Direct_Key_HD$) = 6) MAKESTRING (Direct_Command$,"TFHD%s\r",Direct_Key_HD$);
		ClearBuffer(Direct_Key_HD$);
}

Push Enter_XM
{

	  if (len(Direct_Key_XM$) = 3) MAKESTRING (Direct_Command$,"TFXM%s\r",Direct_Key_XM$);
	  if (len(Direct_Key_XM$) = 2) MAKESTRING (Direct_Command$,"TFXM0%s\r",Direct_Key_XM$); // pad l
	  if (len(Direct_Key_XM$) = 1) MAKESTRING (Direct_Command$,"TFXM00%s\r",Direct_Key_XM$); // pad 2
		ClearBuffer(Direct_Key_XM$);
}

Push Enter_DAB
{

	  if (len(Direct_Key_DAB$) = 6) MAKESTRING (Direct_Command$,"TFDA%s\r",Direct_Key_DAB$); // Check if DAB strings are length 6
		ClearBuffer(Direct_Key_DAB$);
}
		


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
  Semaphore = 0;
	FL = 100;
	FR = 100;
	SL = 100;
	SR = 100;
	SBL = 100;
	SBR = 100;
	C = 100;
	SW = 100;
	SB = 100;
	Clearbuffer(MainLevelSent$);
	Clearbuffer(Zone2LevelSent$);
	Clearbuffer(Zone3LevelSent$);
	ClearBuffer(MainLevelInt$);
	Clearbuffer(Zone2LevelInt$);
	Clearbuffer(Zone3LevelInt$);
	Clearbuffer(Direct_Key_AM_FM$);
	ClearBuffer(Direct_Key_XM$);	
	ClearBuffer(Direct_Key_DAB$);
}


